<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kafka调研报告3：基于Kafka多点通信方案</title>
    <url>/2020/02/17/Kafka%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A3%EF%BC%9A%E5%9F%BA%E4%BA%8EKafka%E5%A4%9A%E7%82%B9%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在华为核心网和无线领域有几个重量级的产品比如U2000/M2000等网管系统<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://ishare.iask.sina.com.cn/f/LmFNcBVsuz.html
">[1]</span></a></sup>。里面的底层通信就是一套基于MDP(Message Dispatching Process)的星形拓扑通信系统。不同的业务进程之间通过消息(REQ/RSP)来通信，而不是通信RPC或者库的依赖。</p>
<p>由于年代久远，和现在主流的MQ技术相比有一些不同的地方，随便说几点:</p>
<ol>
<li><p><strong><em>消息序列化只支持ASN.1</em></strong>. 当然好处在于提供一套抽象的语义定义，并且大家只需要传递ASN.1文件即可。或者由一个公共方将ASN.1文件编程对应的模型和支撑库提供给各个端对进行开发。但是同时呢，不好的地方也很明显，一方面是技术过时，再一个就是需要一个专门的团队来维护ASN.1定义和相应的工具；另一方面在于管理上没有形成一个好的ASN.1的分发机制。导致版本之间定义很混乱。对于前后向兼容性问题很难做到。当然，在网上也可以找到一些开源的ASN.1 Compiler<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://github.com/vlm/asn1c
">[3]</span></a></sup>。能不能用不清楚。</p>
</li>
<li><p><strong><em>MDP并不支持消息的缓存和队列机制，本身也不提供可靠性保证。</em></strong> 那么如何来提供不丢失的消息呢？ 在华为，答案是提供一个框架层，业务团队并不直接使用MDP提供的库和接口，而是使用封装之后的一套框架，这套框架中提供了可靠性事件的发送的。实现的机制就是在发送之前存库。在接收业务处理完成之后，再从数据库中移除。当然这套机制也出现过不少问题，比如消息积压，数据库的内容不断上涨，甚至在局点可能出现过数据库表过大，导致其他业务访问很慢，甚至于极端情况下，整个数据库崩掉的情况都有。</p>
</li>
<li><p><strong><em>MDP无法水平扩展，当消息出现峰值的时候，MDP有可能出现丢包的问题。</em></strong> 这个问题也比较头疼。这是从一开始设计的时候就没有考虑的问题。考虑到U2000/M2000对应的数据量实际上是很大的。假如MDP的处理峰值在于2000/s，每秒钟2W条消息尽力保证不丢包。 这个阈值总会在未来的某一天会被打破，那么这个时候问题就出来了，系统会出现频繁丢包，系统业务频繁故障，但是由于底层数据通道，在应用层面几乎无法做到一个比较好的解决方案。</p>
</li>
<li><p><strong><em>MDP采用ACE<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://www.dre.vanderbilt.edu/~schmidt/TAO-overview.html
">[4]</span></a></sup>，这一套框架比较复杂。</em></strong>当然整体的U2000/M2000都是基于这个来开发，导致比较重型。<br>另外就是在U2000/M2000北向领域，采用了大量的ACE/TAO/Event Channel机制。灵活性不够。<br><strong><em>为什么说CORBA是一个很不好的技术，最终会被时代所抛弃? 可以看这篇论文</em></strong>。<a href="/2020/02/17/Kafka%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A3%EF%BC%9A%E5%9F%BA%E4%BA%8EKafka%E5%A4%9A%E7%82%B9%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88/1142031.1142044.pdf" title="下载链接">下载链接</a></p>
</li>
<li><p><strong><em>当前通信架构转异构通信架构的难度。</em></strong>对于U2000/M2000来说，所有的开发支撑库都需要自己来完成。当然，对于华为来说，这个不是问题。问题这是人力预算的问题。</p>
</li>
</ol>
<p>上面说的一些问题在华为内部看来，有一些并不是问题，有一些问题可以绕过。有几个点：</p>
<ol>
<li><strong><em>客户的OSS/BSS系统都是基于CORBA调用。</em></strong></li>
<li><strong><em>ITU的标准定义就是基于ASN.1模型发布。</em></strong></li>
<li><strong><em>整个产品技术切换的成本太高, 所以要保护既有投资，CORBA技术带来的复杂度也可以成为一种护城河。</em></strong></li>
<li><strong><em>整个业务开发团队转型所面临的学习成本、人才招聘、人力缺口等等。</em></strong></li>
</ol>
<p>那么，从这几点来考虑，保持当前技术稳定，保持客户服务的稳定变是重点。所以，对于大企业来说，真的不是某个技术好就要上的。上面这个并非是吐槽，而是纯粹从技术上来分析我所经历过的产品在架构上的一些问题。</p>
<p>那么回过头来，那么如何通过messge queue来解耦不同系统（同构的还是异构的)来交换和通信来实现多异构同构系统之间的 星形通信呢？ 我们来做一个简单的设计。</p>
<a id="more"></a>

<h1 id="多应用同一个通道的通信模型"><a href="#多应用同一个通道的通信模型" class="headerlink" title="多应用同一个通道的通信模型"></a>多应用同一个通道的通信模型</h1><p><strong><em>关键点</em></strong>：</p>
<ol>
<li>每个应用都至少有一个Producer和Consumer连接到Kafka集群</li>
<li>每个应用都有唯一的独立的ID（SystemId），此ID通过公共的协议来约定（Protocol Buffer）。</li>
<li>每个应用收到消息之后，检查SystemId是否匹配，如果匹配则处理消息</li>
<li>应用在处理消息的时候，检查消息类型，并在分派给应用层逻辑来进一步处理。</li>
<li>处理完成之后commit消息<img src="/2020/02/17/Kafka%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A3%EF%BC%9A%E5%9F%BA%E4%BA%8EKafka%E5%A4%9A%E7%82%B9%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88/20200217114045.png" class="" title="multi-point-comm">



</li>
</ol>
<h1 id="消息格式定义"><a href="#消息格式定义" class="headerlink" title="消息格式定义"></a>消息格式定义</h1><p>采用Protocol Buffer<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://developers.google.com/protocol-buffers
">[6]</span></a></sup>来定义， 选择protobuf原因参考我的博文<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://www.typedefine.cn/2020/02/14/Kafka%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A2-%E6%B6%88%E6%81%AF%E5%BA%8F%E5%88%97%E5%8C%96%E6%A1%86%E6%9E%B6%E6%A8%AA%E5%90%91%E5%AF%B9%E6%AF%94/">[7]</span></a></sup>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">enum MessageType &#123;</span><br><span class="line">    REQ &#x3D; 0;</span><br><span class="line">    RSP &#x3D; 1;</span><br><span class="line">    NOTIFICATION &#x3D; 2;</span><br><span class="line">    COMMAND &#x3D; 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum MessageId &#123;</span><br><span class="line">    SYSTEM_RESERVER &#x3D; 0;</span><br><span class="line">    reserve 1-100;</span><br><span class="line">    APPLICATION_BIZ_1 &#x3D; 101;  &#x2F;&#x2F;业务消息定义1</span><br><span class="line">    APPLICATION_BIZ_2 &#x3D; 102;  &#x2F;&#x2F;业务消息定义2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message MessageEnvelope &#123;</span><br><span class="line">    string message_sn &#x3D; 1;</span><br><span class="line">    string src_message_sn &#x3D; 2;</span><br><span class="line">    MessageId message_id &#x3D; 3;</span><br><span class="line">    MessageType message_type &#x3D; 4;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;用来做消息路由</span><br><span class="line">    SystemId receiver_system_id &#x3D; 16;</span><br><span class="line">    int32 receiver_app_id &#x3D; 17;</span><br><span class="line">    int32 receiver_domain_id &#x3D; 18;</span><br><span class="line">    int32 receiver_module_id &#x3D; 19;</span><br><span class="line">    int32 receiver_function_id &#x3D; 20;</span><br><span class="line"></span><br><span class="line">    SystemId sender_system_id &#x3D; 21;</span><br><span class="line">    int32 sender_app_id &#x3D; 22;</span><br><span class="line">    int32 sender_domain_id &#x3D; 23;</span><br><span class="line">    int32 sender_module_id &#x3D; 24;</span><br><span class="line">    int32 sender_function_id &#x3D; 25;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;消息体，可以携带任意消息格式，并且自己携带消息类型信息</span><br><span class="line">    MessageBody body &#x3D; 30;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* 业务层请求消息1</span><br><span class="line">*&#x2F;</span><br><span class="line">message Applcation_Biz_Req &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line">* 业务层响应消息1</span><br><span class="line">*&#x2F;</span><br><span class="line">message Applcation_Biz_Rsp &#123;</span><br><span class="line">    int32 status;</span><br><span class="line">    string errorMsg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="应用层动态Dispatch消息"><a href="#应用层动态Dispatch消息" class="headerlink" title="应用层动态Dispatch消息"></a>应用层动态Dispatch消息</h1><ol>
<li>二进制消息解包成Message</li>
<li>根据消息类型（或者业务ID）并分派任务</li>
<li>可以支持更复杂的应用层消息路由<br> 通过<br> （system_id, app_id, domain_id, module_id, function_id）<br> 可以支持超级复杂的消息路由，用来找到对应的消息处理函数。</li>
</ol>
<img src="/2020/02/17/Kafka%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A3%EF%BC%9A%E5%9F%BA%E4%BA%8EKafka%E5%A4%9A%E7%82%B9%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88/20200217114417.png" class="" title="multi-point-dispatch">


<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://ishare.iask.sina.com.cn/f/LmFNcBVsuz.html<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.itu.int/en/ITU-T/asn1/Pages/introduction.aspx<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://github.com/vlm/asn1c<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://www.dre.vanderbilt.edu/~schmidt/TAO-overview.html<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://dl.acm.org/doi/pdf/10.1145/1142031.1142044?download=true<a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://developers.google.com/protocol-buffers<a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://www.typedefine.cn/2020/02/14/Kafka%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A2-%E6%B6%88%E6%81%AF%E5%BA%8F%E5%88%97%E5%8C%96%E6%A1%86%E6%9E%B6%E6%A8%AA%E5%90%91%E5%AF%B9%E6%AF%94/<a href="#fnref:7" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Kafka</category>
        <category>Architecture</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>Message Queue</tag>
        <tag>Topo Comm model</tag>
      </tags>
  </entry>
  <entry>
    <title>用Nodejs和Nginx搭建Websocket服务</title>
    <url>/2020/02/17/%E7%94%A8Nodejs%E5%92%8CNginx%E6%90%AD%E5%BB%BAWebsocket%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Nodejs、Express、Socket-io、Nginx"><a href="#Nodejs、Express、Socket-io、Nginx" class="headerlink" title="Nodejs、Express、Socket.io、Nginx"></a>Nodejs、Express、Socket.io、Nginx</h1><p>使用Express框架和Socket.io库将websocket搭建起来，并监听同一个端口，参考官方例子<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://socket.io/docs/#Using-with-Express
">[1]</span></a></sup>就可以，非常简单。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">80</span>);</span><br><span class="line"><span class="comment">// WARNING: app.listen(80) will NOT work here!</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">socket.emit(<span class="string">'news'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world'</span> &#125;);</span><br><span class="line">socket.on(<span class="string">'my other event'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h1 id="Nginx作为Web-Server和WebSocket-Proxy"><a href="#Nginx作为Web-Server和WebSocket-Proxy" class="headerlink" title="Nginx作为Web Server和WebSocket Proxy"></a>Nginx作为Web Server和WebSocket Proxy</h1><p>在配置Nginx的时候，遇到了很多的问题，并且在网上现在找不到一篇对这个问题讲解的非常清楚的文档。<br>比如：</p>
<a id="more"></a>

<ol>
<li>Nginx是否支持http/websocket在同一个端口。答案是可以的。</li>
<li>Nginx支持支持代理socket.io。 结论：支持。</li>
<li>var socket = io(); 初始化的时候，io()要不要传入地址参数。 结论：不需要传入参数。</li>
<li>Nginx配置的URL匹配规则是什么。</li>
</ol>
<p>全部代码请跳转<a href="https://github.com/semonw/ws-proxy" target="_blank" rel="noopener">Github</a>.</p>
<p>经过试验和参考Nginx的文档<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.nginx.com/blog/nginx-nodejs-websockets-socketio/">[2]</span></a></sup>，Nginx配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>  D:\\Projects\\ws-proxy\\docroot;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span><span class="regexp"> ^~/socket.io</span> &#123;</span><br><span class="line">                        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">                        <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">                        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">                        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                        <span class="attribute">proxy_pass</span> http://127.0.0.1:8885;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>为什么nginx上配置的Location必须是固定的，通过调试socket.io的机制就清楚了，见下。如果将nginx location中的规则修改成其他的，前端将无法连接socket.io服务。</p>
<img src="/2020/02/17/%E7%94%A8Nodejs%E5%92%8CNginx%E6%90%AD%E5%BB%BAWebsocket%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/20200217100716.png" class="" title="snapshot_socket.io">

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://socket.io/docs/#Using-with-Express<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.nginx.com/blog/nginx-nodejs-websockets-socketio/<a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>websokcet</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>websocket</tag>
        <tag>nginx</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka调研报告2-消息序列化框架建议与对比</title>
    <url>/2020/02/14/Kafka%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A2-%E6%B6%88%E6%81%AF%E5%BA%8F%E5%88%97%E5%8C%96%E6%A1%86%E6%9E%B6%E6%A8%AA%E5%90%91%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="调研结果和建议"><a href="#调研结果和建议" class="headerlink" title="调研结果和建议"></a>调研结果和建议</h2><p>综合来看，Avro或者Protocol Buffer二选一即可， 但是出于灵活性和标准JSON的支持力度上来看，更推荐Protocol Buffers。同时部分数据依然可以通过JSON方式传输。</p>
<h2 id="主流序列化框架对比"><a href="#主流序列化框架对比" class="headerlink" title="主流序列化框架对比"></a>主流序列化框架对比</h2><h3 id="Kafka的序列化"><a href="#Kafka的序列化" class="headerlink" title="Kafka的序列化"></a>Kafka的序列化</h3><p>Kafka并不限定的消息格式。Kafka自身提供了一系列的序列化器，比如ByteArraySerializer，ByteBufferSerializer，DoubleSerializer，FloatSerializer，StringSerializer，UUIDSerializer， IntegerDeserializer, LongSerializer, ShortSerializer, 总结起来就是基本类型、字符串类型、二进制消息。</p>
<p>但是在通常情况下不会使用比如Float这种来做序列化，原因在于系统间交互或者放到Kafka的数据一般来说都比较复杂，无法用一个字段来表示。于是，这种情况下，就需要在Kafka之上建立一个消息格式的契约，以便于Kafka的生产者和消费者之间都能理解消息中的语义。最好地方就是在Kafka基础之上增加一层应用层的消息协议，比如JSON格式、比如二进制编解码协议（序列化），出于性能考虑，一般也不直接使用Java POJO对象的原生序列化（虽然可行）。在Apache Spark中使用的Kryo Register，由于场景限制（不提供IDL定义），不适用Kafka。</p>
<p>下面对常见的几个序列化框架做一个横向对比：</p>
<a id="more"></a>

<h3 id="几种主流序列化对比"><a href="#几种主流序列化对比" class="headerlink" title="几种主流序列化对比"></a>几种主流序列化对比</h3><p>当前比较流行的有JSON<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf
">[1]</span></a></sup>, Apache Avro<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://avro.apache.org/
">[2]</span></a></sup>, Google开源的Protocol Buffer<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://developers.google.com/protocol-buffers
">[3]</span></a></sup>，Apache Thrift<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://thrift.apache.org/">[4]</span></a></sup>。</p>
<table>
<thead>
<tr>
<th>消息格式</th>
<th>JSON</th>
<th>Apache Avro</th>
<th>Protocol Buffer</th>
</tr>
</thead>
<tbody><tr>
<td>License</td>
<td>ECMA-404标准</td>
<td>Apache License 2.0</td>
<td>BSD License</td>
</tr>
<tr>
<td>IDL</td>
<td>无IDL定义，也就意味着系统间无契约</td>
<td>通过JSON定义，灵活度不够。语言无关。</td>
<td>类似Thrift格式，灵活定义，支持Any类型</td>
</tr>
<tr>
<td>Code Generator</td>
<td>无，但是应该可以找到对应的开源工具</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>性能</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>兼容性</td>
<td>高</td>
<td>前向兼容</td>
<td>前向兼容</td>
</tr>
<tr>
<td>JSON&lt;-&gt;二进制</td>
<td>支持</td>
<td>支持，但是非标准JSON</td>
<td>支持</td>
</tr>
<tr>
<td>支持语言</td>
<td>几乎所有</td>
<td>Java/C++/C/C#</td>
<td>Java/Python/C++。 其他语言有对应开源库，比如Nodejs可以使用暴雪开源库。</td>
</tr>
</tbody></table>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://avro.apache.org/<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://developers.google.com/protocol-buffers<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://thrift.apache.org/<a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Message Queue - Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>Message Queue</tag>
        <tag>Architecture</tag>
        <tag>Serialization</tag>
        <tag>JSON</tag>
        <tag>Apahce Avro</tag>
        <tag>Apahce Thrift</tag>
        <tag>Protocol Buffers</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka调研报告1-跨数据中心的多集群镜像</title>
    <url>/2020/02/14/Kafka%E5%88%9D%E6%AD%A5%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A-%E8%B7%A8%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="调研结果和建议"><a href="#调研结果和建议" class="headerlink" title="调研结果和建议"></a>调研结果和建议</h2><p>针对是否可以跨数据中心部署Kafka集群的问题，答案是可行，但是不建议。建议先支持单集群部署，以简化运维成本，支持多地多应用业务上线。</p>
<h3 id="可行性与跨网络部署产生的问题"><a href="#可行性与跨网络部署产生的问题" class="headerlink" title="可行性与跨网络部署产生的问题"></a>可行性与跨网络部署产生的问题</h3><p>Kafka实际上并不禁止将Broker部署到不同的网络地域。但是，Kafka的设计是按照单个数据中心进行设计、开发、测试和调优的。从Kafka的官方文档<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Kafka Documentation#Datacenter。http://kafka.apache.org/documentation/#datacenters
">[1]</span></a></sup>来看，并不推荐将集群跨网络部署。 由于Broker分布在不同的跨地域的网络（WAN）, 除了数据同步会极大地增加延迟之外， 并且如果由于网络中断无法保证zk始终可用，带来其他问题，比如：</p>
<ol>
<li>Partition Leader无法选举。或者由于网络问题，某个Broker频繁掉线导致集群不稳定。</li>
<li>在Producer推送数据时候，产生延迟（推送到remote Broker）。或者由于网络问题，无法获取ACK。</li>
</ol>
<a id="more"></a>

<h3 id="跨广域网部署Stretch-Cluster"><a href="#跨广域网部署Stretch-Cluster" class="headerlink" title="跨广域网部署Stretch Cluster"></a>跨广域网部署Stretch Cluster</h3><p><strong><em>部署条件：</em></strong></p>
<ol>
<li>至少具有3个高带宽和低延迟的DC（考虑zookeeper）</li>
<li>有需要异地容灾和100%恢复的需求</li>
<li>配置参数min.isr和acks=all。这样就可以要求异地所有的Broker都可以收到，并且确认消息。</li>
</ol>
<p><strong><em>带来的复杂度：</em></strong></p>
<ol>
<li>运维的复杂度，以及带来的成本上升</li>
<li>无法对应Kafka或者应用的故障</li>
</ol>
<h3 id="多集群架构"><a href="#多集群架构" class="headerlink" title="多集群架构"></a>多集群架构</h3><p>有时候需要有场景在不同的地方将数据进行共享或者汇聚。那么可以选择多集群架构。在选择集群的时候需要考虑的一些问题：</p>
<ol>
<li>高延迟</li>
<li>有限的带宽</li>
<li>高成本 主要来自于多个集群部署的硬件成本、人力成本以及带宽的占用</li>
</ol>
<p><strong><em>常见的几种架构<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Kafa权威指南,第8章。
">[2]</span></a></sup></em></strong></p>
<h5 id="Hub和Spoke架构"><a href="#Hub和Spoke架构" class="headerlink" title="Hub和Spoke架构"></a>Hub和Spoke架构</h5><img src="/2020/02/14/Kafka%E5%88%9D%E6%AD%A5%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A-%E8%B7%A8%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E9%9B%86%E7%BE%A4/hub&spoke.png" class="" title="Hub And Spoke">

<h5 id="双活架构"><a href="#双活架构" class="headerlink" title="双活架构"></a>双活架构</h5><img src="/2020/02/14/Kafka%E5%88%9D%E6%AD%A5%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A-%E8%B7%A8%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E9%9B%86%E7%BE%A4/twolives.png" class="" title="双活">

<h5 id="主备架构"><a href="#主备架构" class="headerlink" title="主备架构"></a>主备架构</h5><img src="/2020/02/14/Kafka%E5%88%9D%E6%AD%A5%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A-%E8%B7%A8%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E9%9B%86%E7%BE%A4/master&slave.png" class="" title="主备">


<h3 id="Mirror-Maker官方镜像工具"><a href="#Mirror-Maker官方镜像工具" class="headerlink" title="Mirror Maker官方镜像工具"></a>Mirror Maker官方镜像工具</h3><p>推荐的部署模式<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Mirror Maker。https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=27846330
">[3]</span></a></sup> 是各地独立部署Kafka cluster, 通过Mirror Maker连接。这种部署的好处在于每个集群是互相独立的。并不互相影响。通过mm连接集群AB之后，可以确保A的数据是B的一个子集，但是两者并不能完全将彼此服务替代。因为Consumer offset两边并不同步。</p>
<p>通过MM连接示意如下：</p>
<img src="/2020/02/14/Kafka%E5%88%9D%E6%AD%A5%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A-%E8%B7%A8%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E9%9B%86%E7%BE%A4/mm.png" class="" title="MM">

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Kafka Documentation#Datacenter。http://kafka.apache.org/documentation/#datacenters<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Kafa权威指南,第8章。<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Mirror Maker。https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=27846330<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Message Queue - Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>Message Queue</tag>
        <tag>Data center</tag>
        <tag>Cluster</tag>
        <tag>Mirror Maker</tag>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Kafka</title>
    <url>/2020/02/14/%E4%BB%80%E4%B9%88%E6%98%AFKafka/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong><em>占坑，后面有时间对Kafka进行详细的更新</em></strong></p>
<h1 id="A-bit-of-History"><a href="#A-bit-of-History" class="headerlink" title="A bit of History"></a>A bit of History</h1><p>Kafka是高性能的、分布式的、数据可持久化的消息丢列。最初由LinkedIn开发，用来跟踪Web上的用户的一系列事件，譬如页面浏览(Page view)，搜索框的输入，展示的广告等等。这些事件对于监控和调查用于对于网站交互的参与度非常的重要。每天都有大量的数据产生，因为，需要一个可以轻松扩展，同时又不会增加额外负担的一个解决方案。</p>
<p>总体来说，Kafka从设计之初有3个目标：</p>
<ol>
<li>简单的生产者/消费者API设计</li>
<li>尽可能减少网络传输和磁盘存储的额外成本</li>
<li>从一开始就为可扩展性而设计</li>
</ol>
<a id="more"></a>

<h1 id="什么是Kafka"><a href="#什么是Kafka" class="headerlink" title="什么是Kafka"></a>什么是Kafka</h1><p>Kafka<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://kafka.apache.org/
">[1]</span></a></sup>是最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统（也可以当做MQ系统），常见可以用于web/nginx日志、访问日志，消息服务等等，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。</p>
<p>主要应用场景是：日志收集系统和消息系统。</p>
<p>Kafka主要设计目标如下：</p>
<ol>
<li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能。</li>
<li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输。</li>
<li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个partition内的消息顺序传输。</li>
<li>同时支持离线数据处理和实时数据处理。</li>
<li>Scale out:支持在线水平扩展</li>
</ol>
<h1 id="Kafka中的术语说明"><a href="#Kafka中的术语说明" class="headerlink" title="Kafka中的术语说明"></a>Kafka中的术语说明</h1><p>在深入理解Kafka之前，先介绍一下Kafka中的术语。下图展示了Kafka的相关术语以及之间的关系<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.cnblogs.com/qingyunzong/p/9004509.html">[2]</span></a></sup>：</p>
<img src="/2020/02/14/%E4%BB%80%E4%B9%88%E6%98%AFKafka/1228818-20180507190731172-1317551019.png" class="" title="Kafka-structure">
<p>上图中一个topic配置了3个partition。Partition1有两个offset：0和1。Partition2有4个offset。Partition3有1个offset。副本的id和副本所在的机器的id恰好相同。</p>
<p>如果一个topic的副本数为3，那么Kafka将在集群中为每个partition创建3个相同的副本。集群中的每个broker存储一个或多个partition。多个producer和consumer可同时生产和消费数据。</p>
<h2 id="broker"><a href="#broker" class="headerlink" title="broker"></a>broker</h2><p>Kafka 集群包含一个或多个服务器，服务器节点称为broker。</p>
<p>broker存储topic的数据。如果某topic有N个partition，集群有N个broker，那么每个broker存储该topic的一个partition。</p>
<p>如果某topic有N个partition，集群有(N+M)个broker，那么其中有N个broker存储该topic的一个partition，剩下的M个broker不存储该topic的partition数据。</p>
<p>如果某topic有N个partition，集群中broker数目少于N个，那么一个broker存储该topic的一个或多个partition。在实际生产环境中，尽量避免这种情况的发生，这种情况容易导致Kafka集群数据不均衡。</p>
<h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><p>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</p>
<p>类似于数据库的表名</p>
<h2 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h2><p>topic中的数据分割为一个或多个partition。每个topic至少有一个partition。每个partition中的数据使用多个segment文件存储。partition中的数据是有序的，不同partition间的数据丢失了数据的顺序。如果topic有多个partition，消费数据时就不能保证数据的顺序。在需要严格保证消息的消费顺序的场景下，需要将partition数目设为1。</p>
<h2 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h2><p>生产者即数据的发布者，该角色将消息发布到Kafka的topic中。broker接收到生产者发送的消息后，broker将该消息追加到当前用于追加数据的segment文件中。生产者发送的消息，存储到一个partition中，生产者也可以指定数据存储的partition。</p>
<h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>消费者可以从broker中读取数据。消费者可以消费多个topic中的数据。</p>
<h2 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h2><p>每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</p>
<h2 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h2><p>每个partition有多个副本，其中有且仅有一个作为Leader，Leader是当前负责数据的读写的partition。</p>
<h2 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h2><p>Follower跟随Leader，所有写请求都通过Leader路由，数据变更会广播给所有Follower，Follower与Leader保持数据同步。如果Leader失效，则从Follower中选举出一个新的Leader。当Follower与Leader挂掉、卡住或者同步太慢，leader会把这个follower从“in sync replicas”（ISR）列表中删除，重新创建一个Follower。</p>
<h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ol>
<li>Kafka<a href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener">官网文档</a></li>
<li>郭俊的<a href="http://www.jasongj.com/" target="_blank" rel="noopener">博客</a>，以及他在Infoq.cn上发布的<a href="https://www.infoq.cn/profile/1278686/publish" target="_blank" rel="noopener">文章</a>。部分内容存在一些时效性的问题。当做入门的阅读来看，是很不错的。</li>
</ol>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://kafka.apache.org/<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.cnblogs.com/qingyunzong/p/9004509.html<a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Message Queue - Kafka</category>
        <category>Architecture</category>
      </categories>
      <tags>
        <tag>Architecture</tag>
        <tag>Message Queue - Kafka</tag>
        <tag>JMS</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是MQ</title>
    <url>/2020/02/14/%E4%BB%80%E4%B9%88%E6%98%AFMQ/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong><em>这篇文章是一篇未完成稿，有时间再写</em></strong></p>
<h1 id="什么是消息队列（Message-Queue）"><a href="#什么是消息队列（Message-Queue）" class="headerlink" title="什么是消息队列（Message Queue）?"></a>什么是消息队列（Message Queue）?</h1><p>消息队列使得应用之间可以通过互发消息的方式来通信，这和传统的RPC方式有很大的区别。通过消息队列提供的服务，解除了点对点，星形拓扑通信耦合的问题。同时，当目标服务不可用的时候，消息队列充当了临时的消息缓存。</p>
<p>下面先解释一下什么是消息队列<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.cloudamqp.com/blog/2014-12-03-what-is-message-queuing.html
">[1]</span></a></sup>，怎么使用，在架构层面又会带来什么样的好处<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="扩展阅读：https://www.ibm.com/cloud/learn/message-queues
">[2]</span></a></sup>。</p>
<p><strong><em>队列</em></strong>就是将事物排成一列，依次处理，并且依照先进先出(First In, First Out)的顺序。那么消息队列（MQ），就是用于不同系统或者应用之间通信的的列表， 将需要通信的消息保存在队列中，等待应用依次处理。<a href="http://queues.io/" target="_blank" rel="noopener">queues.io</a>是一个比较好的网站可以查找各种不同功能的队列。</p>
<a id="more"></a>
<img src="/2020/02/14/%E4%BB%80%E4%B9%88%E6%98%AFMQ/message-queue-small.png" class="" title="MQ">


<p><strong><em>消息</em></strong>就是在发送者和接受者之间传递的数据。这里的数据可以是任何东西，数据、指令、文件等等，比如一个消息可能是系统A告诉系统B可以开始处理某个任务。</p>
<h1 id="订阅-发布模式"><a href="#订阅-发布模式" class="headerlink" title="订阅/发布模式"></a>订阅/发布模式</h1><p>这种模式也叫生产者和消费者模式。生产者连接到MQ，生成消息然后放入MQ；消费者连接到MQ，获取消息然后进行处理。</p>
<h1 id="架构上的解耦和扩展性"><a href="#架构上的解耦和扩展性" class="headerlink" title="架构上的解耦和扩展性"></a>架构上的解耦和扩展性</h1><p>在现代云架构中，应用程序被分解为多个规模较小且更易于开发、部署和维护的独立构建块。消息队列可为这些分布式应用程序提供通信和协调。消息队列可以显著简化分离应用程序的编码，同时提高性能、可靠性和可扩展性。</p>
<p>借助消息队列，系统的不同部分可相互通信并异步执行处理操作。消息队列提供一个临时存储消息的轻量级缓冲区，以及允许软件组件连接到队列以发送和接收消息的终端节点。这些消息通常较小，可以是请求、恢复、错误消息或明文信息等。要发送消息时，一个名为“创建器”的组件会将消息添加到队列。消息将存储在队列中，直至名为“处理器”的另一组件检索该消息并执行相关操作。</p>
<p>MQ 提供了一个异步通信的机制，当另外一个系统没有响应的时候，发送者并不会因此而阻塞。</p>
<h2 id="解耦和扩展性"><a href="#解耦和扩展性" class="headerlink" title="解耦和扩展性"></a>解耦和扩展性</h2><img src="/2020/02/14/%E4%BB%80%E4%B9%88%E6%98%AFMQ/thumb-mq.jpg" class="" title="Decouple">


<h1 id="消息协议"><a href="#消息协议" class="headerlink" title="消息协议"></a>消息协议</h1><p>现代的MQ支持很多不同的协议<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="WIKI百科：https://en.wikipedia.org/wiki/Message_queue">[5]</span></a></sup>。有了这些协议之后，很多不同类型的MQ都可以在一起协同使用。<br>常见的有AMQP<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="AMQP: https://dl.acm.org/doi/10.1145/1255421.1255424
">[3]</span></a></sup>, MQTT<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="物联网通信息协议: http://mqtt.org/
">[4]</span></a></sup>等等。</p>
<h1 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.cloudamqp.com/blog/2014-12-03-what-is-message-queuing.html<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">扩展阅读：https://www.ibm.com/cloud/learn/message-queues<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">AMQP: https://dl.acm.org/doi/10.1145/1255421.1255424<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">物联网通信息协议: http://mqtt.org/<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">WIKI百科：https://en.wikipedia.org/wiki/Message_queue<a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Message Queue - Kafka</category>
      </categories>
      <tags>
        <tag>Message Queue</tag>
        <tag>Architecture</tag>
        <tag>JMS</tag>
        <tag>AMQP</tag>
        <tag>MQTT</tag>
      </tags>
  </entry>
  <entry>
    <title>Thrift介绍、编译参数以及如何和maven集成</title>
    <url>/2020/02/13/thrift%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E6%94%AF%E6%8C%81%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="什么是Thrift"><a href="#什么是Thrift" class="headerlink" title="什么是Thrift?"></a>什么是Thrift?</h1><p>Thrift是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务。它被当作一个远程过程调用（RPC）框架来使用，是由Facebook为“大规模跨语言服务开发”而开发的。它通过一个代码生成引擎联合了一个软件栈，来创建不同程度的、无缝的跨平台高效服务，可以使用C#、C++（基于POSIX兼容系统）、Cappuccino、Cocoa、Delphi、Erlang、Go、Haskell、Java、Node.js、OCaml、Perl、PHP、Python、Ruby和Smalltalk。虽然它以前是由Facebook开发的，但它现在是Apache软件基金会的开源项目了。该实现被描述在2007年4月的一篇由Facebook发表的技术论文中，该论文现由Apache掌管。</p>
<p>目前流行的服务调用方式有很多种，例如基于 SOAP 消息格式的 Web Service，基于 JSON 消息格式的 RESTful 服务等。其中所用到的数据传输方式包括 XML，JSON 等，然而 XML 相对体积太大，传输效率低，JSON 体积较小，新颖，但还不够完善。本文将介绍由 Facebook 开发的远程服务调用框架 Apache Thrift，它采用接口描述语言定义并创建服务，支持可扩展的跨语言服务开发，所包含的代码生成引擎可以在多种语言中，如 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk 等创建高效的、无缝的服务，其传输数据采用二进制格式，相对 XML 和 JSON 体积更小，对于高并发、大数据量和多语言的环境更有优势。本文将详细介绍 Thrift 的使用，并且提供丰富的实例代码加以解释说明，帮助使用者快速构建服务。Thrift的下载地址是：<a href="http://thrift.apache.org/download" target="_blank" rel="noopener">http://thrift.apache.org/download</a></p>
<h1 id="thrift-exe支持的参数有哪些？"><a href="#thrift-exe支持的参数有哪些？" class="headerlink" title="thrift.exe支持的参数有哪些？"></a>thrift.exe支持的参数有哪些？</h1><a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Microsoft Windows [版本 10.0.18362.657]</span><br><span class="line">(c) 2019 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">~&gt;thrift-0.13.0.exe -<span class="built_in">help</span></span><br><span class="line">Usage: thrift [options] file</span><br><span class="line">Options:</span><br><span class="line">  -version    Print the compiler version</span><br><span class="line">  -o dir      Set the output directory <span class="keyword">for</span> gen-* packages</span><br><span class="line">               (default: current directory)</span><br><span class="line">  -out dir    Set the ouput location <span class="keyword">for</span> generated files.</span><br><span class="line">               (no gen-* folder will be created)</span><br><span class="line">  -I dir      Add a directory to the list of directories</span><br><span class="line">                searched <span class="keyword">for</span> include directives</span><br><span class="line">  -nowarn     Suppress all compiler warnings (BAD!)</span><br><span class="line">  -strict     Strict compiler warnings on</span><br><span class="line">  -v[erbose]  Verbose mode</span><br><span class="line">  -r[ecurse]  Also generate included files</span><br><span class="line">  -debug      Parse debug trace to stdout</span><br><span class="line">  --allow-neg-keys  Allow negative field keys (Used to preserve protocol</span><br><span class="line">                compatibility with older .thrift files)</span><br><span class="line">  --allow-64bit-consts  Do not <span class="built_in">print</span> warnings about using 64-bit constants</span><br><span class="line">  --gen STR   Generate code with a dynamically-registered generator.</span><br><span class="line">                STR has the form language[:key1=val1[,key2[,key3=val3]]].</span><br><span class="line">                Keys and values are options passed to the generator.</span><br><span class="line">                Many options will not require values.</span><br><span class="line"></span><br><span class="line">Options related to audit operation</span><br><span class="line">   --audit OldFile   Old Thrift file to be audited with <span class="string">'file'</span></span><br><span class="line">  -Iold dir    Add a directory to the list of directories</span><br><span class="line">                searched <span class="keyword">for</span> include directives <span class="keyword">for</span> old thrift file</span><br><span class="line">  -Inew dir    Add a directory to the list of directories</span><br><span class="line">                searched <span class="keyword">for</span> include directives <span class="keyword">for</span> new thrift file</span><br><span class="line"></span><br><span class="line">Available generators (and options):</span><br><span class="line">  as3 (AS3):</span><br><span class="line">    bindable:        Add [bindable] metadata to all the struct classes.</span><br><span class="line">  c_glib (C, using GLib):</span><br><span class="line">  cl (Common Lisp):</span><br><span class="line">    no_asd:          Do not define ASDF systems <span class="keyword">for</span> each generated Thrift program.</span><br><span class="line">    sys_pref=        The prefix to give ASDF system names. Default: thrift-gen-</span><br><span class="line">  cpp (C++):</span><br><span class="line">    cob_style:       Generate <span class="string">"Continuation OBject"</span>-style classes.</span><br><span class="line">    no_client_completion:</span><br><span class="line">                     Omit calls to completion__() <span class="keyword">in</span> CobClient class.</span><br><span class="line">    no_default_operators:</span><br><span class="line">                     Omits generation of default operators ==, != and &lt;</span><br><span class="line">    templates:       Generate templatized reader/writer methods.</span><br><span class="line">    pure_enums:      Generate pure enums instead of wrapper classes.</span><br><span class="line">    include_prefix:  Use full include paths <span class="keyword">in</span> generated files.</span><br><span class="line">    moveable_types:  Generate move constructors and assignment operators.</span><br><span class="line">    no_ostream_operators:</span><br><span class="line">                     Omit generation of ostream definitions.</span><br><span class="line">    no_skeleton:     Omits generation of skeleton.</span><br><span class="line">  csharp (C<span class="comment">#):</span></span><br><span class="line">    async:           Adds Async support using Task.Run.</span><br><span class="line">    wcf:             Adds bindings <span class="keyword">for</span> WCF to generated classes.</span><br><span class="line">    serial:          Add serialization support to generated classes.</span><br><span class="line">    nullable:        Use nullable types <span class="keyword">for</span> properties.</span><br><span class="line">    hashcode:        Generate a hashcode and equals implementation <span class="keyword">for</span> classes.</span><br><span class="line">    union:           Use new union typing, <span class="built_in">which</span> includes a static <span class="built_in">read</span> <span class="keyword">function</span> <span class="keyword">for</span> union types.</span><br><span class="line">  d (D):</span><br><span class="line">  dart (Dart):</span><br><span class="line">    library_name:    Optional override <span class="keyword">for</span> library name.</span><br><span class="line">    library_prefix:  Generate code that can be used within an existing library.</span><br><span class="line">                     Use a dot-separated string, e.g. <span class="string">"my_parent_lib.src.gen"</span></span><br><span class="line">    pubspec_lib:     Optional override <span class="keyword">for</span> thrift lib dependency <span class="keyword">in</span> pubspec.yaml,</span><br><span class="line">                     e.g. <span class="string">"thrift: 0.x.x"</span>.  Use a pipe delimiter to separate lines,</span><br><span class="line">                     e.g. <span class="string">"thrift:|  git:|    url: git@foo.com"</span></span><br><span class="line">  delphi (delphi):</span><br><span class="line">    ansistr_binary:  Use AnsiString <span class="keyword">for</span> binary datatype (default is TBytes).</span><br><span class="line">    register_types:  Enable TypeRegistry, allows <span class="keyword">for</span> creation of struct, union</span><br><span class="line">                     and container instances by interface or TypeInfo()</span><br><span class="line">    constprefix:     Name TConstants classes after IDL to reduce ambiguities</span><br><span class="line">    events:          Enable and use processing events <span class="keyword">in</span> the generated code.</span><br><span class="line">    xmldoc:          Enable XMLDoc comments <span class="keyword">for</span> Help Insight etc.</span><br><span class="line">    async:           Generate IAsync interface to use Parallel Programming Library (XE7+ only).</span><br><span class="line">  erl (Erlang):</span><br><span class="line">    legacynames:     Output files retain naming conventions of Thrift 0.9.1 and earlier.</span><br><span class="line">    maps:            Generate maps instead of dicts.</span><br><span class="line">    otp16:           Generate non-namespaced dict and <span class="built_in">set</span> instead of dict:dict and sets:<span class="built_in">set</span>.</span><br><span class="line">  go (Go):</span><br><span class="line">    package_prefix=  Package prefix <span class="keyword">for</span> generated files.</span><br><span class="line">    thrift_import=   Override thrift package import path (default:github.com/apache/thrift/lib/go/thrift)</span><br><span class="line">    package=         Package name (default: inferred from thrift file name)</span><br><span class="line">    ignore_initialisms</span><br><span class="line">                     Disable automatic spelling correction of initialisms (e.g. <span class="string">"URL"</span>)</span><br><span class="line">    read_write_private</span><br><span class="line">                     Make <span class="built_in">read</span>/write methods private, default is public Read/Write</span><br><span class="line">  gv (Graphviz):</span><br><span class="line">    exceptions:      Whether to draw arrows from <span class="built_in">functions</span> to exception.</span><br><span class="line">  haxe (Haxe):</span><br><span class="line">    callbacks        Use onError()/onSuccess() callbacks <span class="keyword">for</span> service methods (like AS3)</span><br><span class="line">    rtti             Enable @:rtti <span class="keyword">for</span> generated classes and interfaces</span><br><span class="line">    buildmacro=my.macros.Class.method(args)</span><br><span class="line">                     Add @:build macro calls to generated classes and interfaces</span><br><span class="line">  hs (Haskell):</span><br><span class="line">  html (HTML):</span><br><span class="line">    standalone:      Self-contained mode, includes all CSS <span class="keyword">in</span> the HTML files.</span><br><span class="line">                     Generates no style.css file, but HTML files will be larger.</span><br><span class="line">    noescape:        Do not escape html <span class="keyword">in</span> doc text.</span><br><span class="line">  java (Java):</span><br><span class="line">    beans:           Members will be private, and setter methods will <span class="built_in">return</span> void.</span><br><span class="line">    private-members: Members will be private, but setter methods will <span class="built_in">return</span> <span class="string">'this'</span> like usual.</span><br><span class="line">    nocamel:         Do not use CamelCase field accessors with beans.</span><br><span class="line">    fullcamel:       Convert underscored_accessor_or_service_names to camelCase.</span><br><span class="line">    android:         Generated structures are Parcelable.</span><br><span class="line">    android_legacy:  Do not use java.io.IOException(throwable) (available <span class="keyword">for</span> Android 2.3 and above).</span><br><span class="line">    option_type:     Wrap optional fields <span class="keyword">in</span> an Option <span class="built_in">type</span>.</span><br><span class="line">    rethrow_unhandled_exceptions:</span><br><span class="line">                     Enable rethrow of unhandled exceptions and <span class="built_in">let</span> them propagate futher. (Default behavior is to catch and <span class="built_in">log</span> it.)</span><br><span class="line">    java5:           Generate Java 1.5 compliant code (includes android_legacy flag).</span><br><span class="line">    reuse-objects:   Data objects will not be allocated, but existing instances will be used (<span class="built_in">read</span> and write).</span><br><span class="line">    sorted_containers:</span><br><span class="line">                     Use TreeSet/TreeMap instead of HashSet/HashMap as a implementation of <span class="built_in">set</span>/map.</span><br><span class="line">    generated_annotations=[undated|suppress]:</span><br><span class="line">                     undated: suppress the date at @Generated annotations</span><br><span class="line">                     suppress: suppress @Generated annotations entirely</span><br><span class="line">    unsafe_binaries: Do not copy ByteBuffers <span class="keyword">in</span> constructors, getters, and setters.</span><br><span class="line">  javame (Java ME):</span><br><span class="line">  js (Javascript):</span><br><span class="line">    jquery:          Generate jQuery compatible code.</span><br><span class="line">    node:            Generate node.js compatible code.</span><br><span class="line">    ts:              Generate TypeScript definition files.</span><br><span class="line">    with_ns:         Create global namespace objects when using node.js</span><br><span class="line">    es6:             Create ES6 code with Promises</span><br><span class="line">    thrift_package_output_directory=&lt;path&gt;:</span><br><span class="line">                     Generate episode file and use the &lt;path&gt; as prefix</span><br><span class="line">    imports=&lt;paths_to_modules&gt;:</span><br><span class="line">                     <span class="string">':'</span> separated list of paths of modules that has episode files <span class="keyword">in</span> their root</span><br><span class="line">  json (JSON):</span><br><span class="line">    merge:           Generate output with included files merged</span><br><span class="line">  lua (Lua):</span><br><span class="line">    omit_requires:   Suppress generation of require <span class="string">'somefile'</span>.</span><br><span class="line">  netcore (C<span class="comment">#):</span></span><br><span class="line">    wcf:             Adds bindings <span class="keyword">for</span> WCF to generated classes.</span><br><span class="line">    serial:          Add serialization support to generated classes.</span><br><span class="line">    nullable:        Use nullable types <span class="keyword">for</span> properties.</span><br><span class="line">    hashcode:        Generate a hashcode and equals implementation <span class="keyword">for</span> classes.</span><br><span class="line">    union:           Use new union typing, <span class="built_in">which</span> includes a static <span class="built_in">read</span> <span class="keyword">function</span> <span class="keyword">for</span> union types.</span><br><span class="line">  netstd (C<span class="comment">#):</span></span><br><span class="line">    wcf:             Adds bindings <span class="keyword">for</span> WCF to generated classes.</span><br><span class="line">    serial:          Add serialization support to generated classes.</span><br><span class="line">    union:           Use new union typing, <span class="built_in">which</span> includes a static <span class="built_in">read</span> <span class="keyword">function</span> <span class="keyword">for</span> union types.</span><br><span class="line">  ocaml (OCaml):</span><br><span class="line">  perl (Perl):</span><br><span class="line">  php (PHP):</span><br><span class="line">    inlined:         Generate PHP inlined files</span><br><span class="line">    server:          Generate PHP server stubs</span><br><span class="line">    oop:             Generate PHP with object oriented subclasses</span><br><span class="line">    classmap:        Generate old-style PHP files (use classmap autoloading)</span><br><span class="line">    rest:            Generate PHP REST processors</span><br><span class="line">    nsglobal=NAME:   Set global namespace</span><br><span class="line">    validate:        Generate PHP validator methods</span><br><span class="line">    json:            Generate JsonSerializable classes (requires PHP &gt;= 5.4)</span><br><span class="line">  py (Python):</span><br><span class="line">    zope.interface:  Generate code <span class="keyword">for</span> use with zope.interface.</span><br><span class="line">    twisted:         Generate Twisted-friendly RPC services.</span><br><span class="line">    tornado:         Generate code <span class="keyword">for</span> use with Tornado.</span><br><span class="line">    no_utf8strings:  Do not Encode/decode strings using utf8 <span class="keyword">in</span> the generated code. Basically no effect <span class="keyword">for</span> Python 3.</span><br><span class="line">    coding=CODING:   Add file encoding <span class="built_in">declare</span> <span class="keyword">in</span> generated file.</span><br><span class="line">    slots:           Generate code using slots <span class="keyword">for</span> instance members.</span><br><span class="line">    dynamic:         Generate dynamic code, less code generated but slower.</span><br><span class="line">    dynbase=CLS      Derive generated classes from class CLS instead of TBase.</span><br><span class="line">    dynfrozen=CLS    Derive generated immutable classes from class CLS instead of TFrozenBase.</span><br><span class="line">    dynexc=CLS       Derive generated exceptions from CLS instead of TExceptionBase.</span><br><span class="line">    dynimport=<span class="string">'from foo.bar import CLS'</span></span><br><span class="line">                     Add an import line to generated code to find the dynbase class.</span><br><span class="line">    package_prefix=<span class="string">'top.package.'</span></span><br><span class="line">                     Package prefix <span class="keyword">for</span> generated files.</span><br><span class="line">    old_style:       Deprecated. Generate old-style classes.</span><br><span class="line">  rb (Ruby):</span><br><span class="line">    rubygems:        Add a <span class="string">"require 'rubygems'"</span> line to the top of each generated file.</span><br><span class="line">    namespaced:      Generate files <span class="keyword">in</span> idiomatic namespaced directories.</span><br><span class="line">  rs (Rust):</span><br><span class="line"></span><br><span class="line">  st (Smalltalk):</span><br><span class="line">  swift (Swift 3.0):</span><br><span class="line">    log_unexpected:  Log every time an unexpected field ID or <span class="built_in">type</span> is encountered.</span><br><span class="line">    debug_descriptions:</span><br><span class="line">                     Allow use of debugDescription so the app can add description via a cateogory/extension</span><br><span class="line">    async_clients:   Generate clients <span class="built_in">which</span> invoke asynchronously via block syntax.</span><br><span class="line">    namespaced:      Generate <span class="built_in">source</span> <span class="keyword">in</span> Module scoped output directories <span class="keyword">for</span> Swift Namespacing.</span><br><span class="line">    cocoa:           Generate Swift 2.x code compatible with the Thrift/Cocoa library</span><br><span class="line">    promise_kit:     Generate clients <span class="built_in">which</span> invoke asynchronously via promises (only use with cocoa flag)</span><br><span class="line">    safe_enums:      Generate enum types with an unknown <span class="keyword">case</span> to handle unspecified values rather than throw a serialization error</span><br><span class="line">  xml (XML):</span><br><span class="line">    merge:           Generate output with included files merged</span><br><span class="line">    no_default_ns:   Omit default xmlns and add idl: prefix to all elements</span><br><span class="line">    no_namespaces:   Do not add namespace definitions to the XML model</span><br><span class="line">  xsd (XSD):</span><br><span class="line">  </span><br></pre></td></tr></table></figure>


<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法:"></a>基本用法:</h1><p>thrift –gen <language> <Thrift filename> 把一个thrift文件编译成对应语言的代码<br>thrift -r –gen <language> <Thrift filename> 将所有<Thrift filename> thrift所有引用的thrift全部编译成代码</p>
<p>常用做法是定义一个顶级的include.thrift，将所有其他的thrift文件全部包含进来，加上-r参数之后，这样所有的模型都能编译了。</p>
<p>常用参数解释：<br>-o dir gen-* 包的输出目录, 比如gen-java, 下面就是java的包<br>-out dir 生成文件的输出地址，gen-* 目录不会生成，和上面的命令互斥，用一个就行了。<br>-I dir 将目录加到引用文件的搜索路径列表中<br>–gen STR   <strong><em>用动态注册的生成器来产生代码。</em></strong><br>            <strong><em>这里的参数格式是这样的: language:[:key1=val1[,key2[,key3=val3]]]</em></strong><br>            <strong><em>冒号后的键和值是传递给生成器的参数。有的参数不需要值。</em></strong></p>
<pre><code>以java为例：
thrift.exe --gen java:beans,nocamel xxx.thrift
的意思就是，生产java代码，传递给生成器的参数是beans和nocamel
beans: 所有的成员变量私有，setter返回void
nocamel:beans代码的accessor不用驼峰命名法。</code></pre><h1 id="如何支持maven集成"><a href="#如何支持maven集成" class="headerlink" title="如何支持maven集成"></a>如何支持maven集成</h1><h2 id="插件maven-thrift-plugin"><a href="#插件maven-thrift-plugin" class="headerlink" title="插件maven-thrift-plugin"></a>插件maven-thrift-plugin</h2><p>插件的Github目录<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://github.com/dtrott/maven-thrift-plugin
">[2]</span></a></sup>上表示最小配置是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.thrift.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-thrift-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;thriftExecutable&gt;/usr/local/bin/thrift&lt;/thriftExecutable&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;thriftSourceRoot&gt;src/main/thrift&lt;/thriftSourceRoot&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;outputDirectory&gt;src/main/java&lt;/outputDirectory&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>thrift-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;execution&gt;--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;id&gt;thrift-test-sources&lt;/id&gt;--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;phase&gt;generate-test-sources&lt;/phase&gt;--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;goals&gt;--&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--&lt;goal&gt;testCompile&lt;/goal&gt;--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;/goals&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;/execution&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是从我的使用来看，这个插件没有人维护，最后一次release的时间是2013年11月。插件使用起来有很多的问题。所以我建议是第二种方式。</p>
<img src="/2020/02/13/thrift%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%E6%94%AF%E6%8C%81%E5%8F%82%E6%95%B0/20200213221502.png" class="" title="github截图">

<h2 id="maven-antrun-plugin"><a href="#maven-antrun-plugin" class="headerlink" title="maven-antrun-plugin"></a>maven-antrun-plugin</h2><p>用这种方式虽然可能比较ugly，但是非常的灵活。几乎可以做你想用命令行或者脚本做到的任何事情。<br>我的配置是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-antrun-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"thrift.filename"</span> <span class="attr">value</span>=<span class="string">"thrift-$&#123;thrift.versoin&#125;.exe"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"thrift.filepath"</span> <span class="attr">value</span>=<span class="string">"$&#123;basedir&#125;/../thrift/$&#123;thrift.filename&#125;"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"thrift.compile.result"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">"$&#123;thrift.output.directory&#125;"</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Define fileset of thrift files --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">id</span>=<span class="string">"thrift.src.files"</span> <span class="attr">dir</span>=<span class="string">"$&#123;thrift.input.directory&#125;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"**/*.thrift"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- Invoke thrift binary for each of these files --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">apply</span> <span class="attr">executable</span>=<span class="string">"$&#123;thrift.filepath&#125;"</span> <span class="attr">resultproperty</span>=<span class="string">"thrift.compile.result"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">failifexecutionfails</span>=<span class="string">"true"</span> <span class="attr">failonerror</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">searchpath</span>=<span class="string">"true"</span> <span class="attr">dir</span>=<span class="string">"$&#123;basedir&#125;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">value</span>=<span class="string">"-o"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">value</span>=<span class="string">"$&#123;thrift.output.directory&#125;"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">value</span>=<span class="string">"--gen"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">value</span>=<span class="string">"java"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">srcfile</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">refid</span>=<span class="string">"thrift.src.files"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">apply</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">echo</span> <span class="attr">message</span>=<span class="string">"execution result is: $&#123;thrift.compile.result&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里重点介绍一下apply<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://ant.apache.org/manual/Tasks/apply.html
">[3]</span></a></sup>的用法。 Apply是Ant的一个内置Task，用来执行一个系统命令。在windows上就是run, 在linux命令上类似bash。<br>解释一下这几个参数的用法:<br><em>executable</em> 可执行文件的路径。<br><em>resultproperty</em> 将命令的返回值保存到属性中。 <strong><em>实际上我们只有在命令执行报错的时候才会关注这个值。比如当我们将failonerror设置为true, 这个时候命令执行报错，但是构建不会停止，这个时候我们才需要将返回值保存下来留待后面检查。</em></strong><br><em>failonerror</em> 当命令返回值不是0的时候停止构建。默认false。<br><em>failifexecutionfails</em> 如果无法启动程序的时候停止构建。默认true。</p>
<p><fileset><sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://ant.apache.org/manual/Types/fileset.html
">[4]</span></a></sup>就是一组文件，通过模式匹配或者其他参数来搜索到一组文件。比较简单。</p>
<p>也有兴趣也可以翻阅一下，其他一些ant任务的介绍<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://blog.csdn.net/fanxiaobin577328725/article/details/53699735">[5]</span></a></sup>。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/index.html<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://github.com/dtrott/maven-thrift-plugin<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://ant.apache.org/manual/Tasks/apply.html<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://ant.apache.org/manual/Types/fileset.html<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://blog.csdn.net/fanxiaobin577328725/article/details/53699735<a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>thrift</category>
      </categories>
      <tags>
        <tag>thrift</tag>
        <tag>compiler</tag>
        <tag>command line options</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么会害怕人工智能</title>
    <url>/2020/02/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%AE%B3%E6%80%95%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>原作者： 保罗▪福特 2015年2月11日<br>译者： 山野@成都 2017</p>
<h1 id="在阅读之前"><a href="#在阅读之前" class="headerlink" title="在阅读之前"></a>在阅读之前</h1><p>这篇文章<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.technologyreview.com/s/534871/our-fear-of-artificial-intelligence/
">[1]</span></a></sup>是我在2017年在麻省理工评论（MIT Technology Review）上看到的翻译的。 作者是保罗▪福特<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.technologyreview.com/profile/paul-ford/
">[2]</span></a></sup>。距离当初的翻译已经过去了2年。现在人工智能的概念已经深入到各行各业，从大家经常接触的SNS社交数据挖掘、智能客服、B2C商品推荐系统、新闻推荐系统、智能汽车，以及到更广泛的更偏向于传统的领域，比如医疗、城市规划、交通领域、建筑领域、社区管理、行政服务等等的一切都在提到一个词，那就是“智慧”，“智能”。</p>
<p>这一切的背后都和机器学习技术（深度学习、加强学习）等等的兴起，以及更加容易使用的框架和API，比如谷歌的tensorflow；更加容易处理大规模数据的框架，比如Apache Spark、Apache Hadoop套件等，这些都助力于并提高了各种业务对于基于大量数据的建模和预测能力。而这些能力就是大家所说的人工智能。</p>
<p>下面这篇文章并没有讲解具体的某种应用于人工智能的技术，而是从更高更抽象的层面，从社会和伦理的层面探讨了人工智能所带来的一些问题。</p>
<p>下面是正文：</p>
<a id="more"></a>

<hr>
<p><strong>* 真正的人工智能可能毁灭这个世界——但前提是人工智能可以被实现。*</strong></p>
<p>信任计算机去控制复杂的系统。</p>
<p>几年前我和一个创业的朋友喝咖啡。他刚满40，生病的父亲和背部疼痛让他感觉自己快要被生活压垮。 “别笑话我”, 他说， “我可是指望着奇点呐。”</p>
<p>我朋友在科技领域工作；他看到了更快的芯片处理器和网络带来的巨大变化。他相信，在他中年时，机器的智能会超过人类——一个被未来学家称之为奇点的时刻。一个友善的超级智能以更快的速度分析人类的基因，解开青春不老的秘密。至少，它可能知道怎么治好背部的疼痛。</p>
<p>可是，如果它不这么友善呢？领导牛津大学人类未来研究所的哲学家Nick Bostrom，在《Superintelligence》描述了这样一种场景，引发了对人工智能的未来的大量讨论。假设有有一个名字叫做“回形针最大化”的机器，它的目的就是尽可能的制造更多的回形针。现在，让我们再想象一下，这个机器变得无比的智能。为了达到目的，他可能制造出一种新的，更有效率的回形针生产设备——直到，它将所有的东西都变成回形针，如同米达斯把一切都变成黄金。</p>
<p>你也许会说，不用担心，只需要编程让它只制造一百万个回形针就停止了啊。但是，假如它完成之后决定检查一下工作呢？计数是否准确？无疑它需要变得更加聪明。这个超级智能的机器制造某种还未发明的、原始计算材料（姑且叫它“计算单元”），然后用它来检查每一个疑问。每一个疑问引发另外的疑问，直到整个地球都被转化成这种“计算单元”，而不是那一百万个回形针。</p>
<p>其实，Bostrom并不认为回形针制造器会真的出现。这是一个思想实验：用来表明无论多么精心设计的系统都无法约束极端的机器智能。不过他确信，超级智能肯定会产生，有可能会很棒，Bostrom认为也有另外一种可能：它不再需要人类。或者做了一些事情，毁灭了整个地球。第八章的标题是：默认的结局是毁灭吗？</p>
<p>如果你觉得很可笑，这很正常。批评者诸如机器人先锋Rodney Brooks评论道，当我们说计算机思考或者正在变得聪明时，这些担心AI会偏离正常轨道的人对计算机在做什么有所误解。从这个角度来看，Bostrom所描述的超级智能会在遥远的未来，也许永远都不会出现。</p>
<p>但依然有很多聪明而有见地的人通知Bostrom的观点，并表示忧虑，这又是为何呢？</p>
<h1 id="自由意志"><a href="#自由意志" class="headerlink" title="自由意志"></a>自由意志</h1><p>机器可以思考吗？ 这个问题从一开始就给计算机科学蒙上了一层阴影。阿兰图灵在1950年提出了一个观点：可以像教小孩一样教机器。1955年，LISP语言的发明者，约翰 · 麦卡锡，发明了”人工智能“这个词。60年代和70年代，AI研究人员用计算机来识别图像、在不同语言之间进行翻译，识别自然语言中的指令，而不仅仅是代码，与此同时，计算机最终发展出可以交谈和思考的能力——进而变得邪恶——的看法开始进入主流文化中。不提老生常谈的《2001，空间奥德赛》的Hal电脑，在1970年的电影《巨人：福宾计划》，展示了一个巨大的闪闪微光的主机计算机将整个世界带入核战的边缘。13年以后，星际大战游戏也探索了同样的主题。1973年的电影《西部世界》中，机器人发疯了，随后开始了屠杀。</p>
<p>当AI的研究和高远的目标遥不可及的时候，AI领域的投资大幅缩水，开始了“漫长的冬天”。即便如此，智能机器的火炬在80年代和90年代被诸如科幻作者Vernor Vinge，研究学者诸如机器人专家、计算机视觉专家Hans Moravec，以及企业家兼工程师Ray Kurzweil等接力而向前发展。Vinge让奇点这个观点变得流行。Kurzweil1999年出版了《精神机器的时代》。图灵提出类人智能的假设，而Vinge、Moravec、Kurzweil想的更加深远：当一个计算机能够独立找到方法达到目标，很有可能它具备了内省的能力——修改自己的软件让自己变得更加智能。说白了，这样的计算机能够自己设计硬件。</p>
<p>像Kurzweil所描绘的那样，这将是一个美好新时代。这样的计算有足够的insight和耐心（用皮秒来计量）来解决纳米科技和空间飞行的难题；他们可以提高人类的生活水平，可以让我们把意识上传成为一种永生的电子形式。智能可以在整个宇宙中扩散。</p>
<p>对于这种阳光乐观派，亦存在完全相反的观点。霍金警告说，由于人类无法和高级AI竞争，这 “会是人类种族终结的魔咒<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://www.bbc.com/news/technology-30290540
">[3]</span></a></sup>”。在阅读了《Superintelligence》之后，埃隆马斯克发推文说，“希望我们不是数字超级智能的生物启动加载器。不幸的是，越来越有这种可能性。” 马斯克接着给未来生活研究所捐助了一百万美金。和Bostrom的研究中心不同的是，这是一个“致力于降低全人类生存风险”，其中包括来自于 “开发人类水平的人工智能”。</p>
<p>现在还没有任何证据表明超级智能的存在。事实上，对如何达到通用目的的人工智能，几乎没有什么进展，甚至连如何达到目标，也没有清晰的路径。近期AI方面的发展，包括Apple的Siri助手和谷歌的无人驾驶汽车， 都揭示出当前技术存在严重的局限。在遇到之前从来没有遇到过的问题的时候，两者都束手无策。人工神经网络通过学习可以识别照片中的猫<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://www.technologyreview.com/news/523181/an-ai-chip-to-help-computers-understand-images/
">[4]</span></a></sup>，但是在此之前，需要经过上万个例子的学习，并且和小孩相比，依然不够准确。</p>
<p>这也是为什么有许多人，比如Brooks（iRobot和Rethink Robotics的创始人)<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://www.rethinkrobotics.com/artificial-intelligence-tool-threat/)
">[5]</span></a></sup>，表示出怀疑。和早期计算机的能力相比，现在的计算机可谓非常令人感到惊讶，即便如此，计算机可以识别出图片中的猫，但是因为机器没有意志，它不知道猫到底是什么，也不知道图片中正在发生着什么，也不具备许多其他人类所独有的洞察力。按照这个观点来看，也许可以达到机器具有智能的地步，但是还需要做的工作远超Bostrom的想象了。假设即便发生了，也不意味着这就是末日审判。从当前的AI发展推导出未来的超级AI，“如同看到热效率提升的内燃机就推出曲速引擎唾手可得的结论一样荒谬”, Brooks在近期在Edge.org<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://edge.org/response-detail/26057
">[6]</span></a></sup>上写到。 至少数百年之内，没有必要担心“存在恶意的超级智能”。</p>
<h1 id="保险策略"><a href="#保险策略" class="headerlink" title="保险策略"></a>保险策略</h1><p>超级智能的崛起可能在遥远的未来，但因此冒风险就有点不负责任了。加州大学伯克利计算机科学教授，斯图尔特 罗素(Stuart J.Russell)表达了和Bostrom同样的担心。罗素和Peter Novig(Kurzweil在谷歌的同事)一起合著了20年来的AI领域的标准教科书《人工智能：一种现代方法》。</p>
<p>“有很多本应非常聪明的公众学者对此毫无头绪”，罗素告诉我，并指出，在过去的十年中, AI的发展极为巨大。公众也许会从摩尔定律的角度来理解AI的发展（更快的计算机可以做更多的事情），实际上，近期AI的工作更多的是更底层的基础研究，使用类似深度学习这样的技术给计算机增加对周遭世界的自动感知。</p>
<p>鉴于谷歌，Facebook和其他公司正在积极创造一种聪明的，“会学习的”的机器，他说，“我想说的是，我们不应该做的事情之一就是全力以赴研发超级智能，而没有去考虑其潜在的风险。这显得有点狂热了。” 罗素做了一个比喻：“这就是像是核聚变试验。如果你问一个核聚变研究员他们在做什么，他们会说他们的工作就是控制。如果你需要无限制的能量，那么你需要控制核聚变反应。” 同样的，如果你需要无限制的智能，那你最好把计算机和人类的需求利益保持一致。</p>
<p>Bostrom的书中建议现在开始研究超级智能和人类利益关系。一个超级智能如同上帝一样，可是他是充满愤怒的还是充满爱意？ 这取决于我们（也就是，工程师们）。如同父母一样，我们必须给孩子设定价值观。并且不是任意价值观，而是哪些符合人类利益的价值观。基本上，我们是在告诉一个神我们应当怎样被对待。那么，如何做到呢？</p>
<p>Bostrom的设想主要建立在一个叫Eliezer Yudkowsky的思想家提出的“统一推理意志”之上——也即是我们所有人心中更好的自己。我们希望，AI会带给我们富有、欢乐、充实的人生：解决背部的疼痛，告诉我们如何去火星旅行。并且，由于我们无法真正就某一件事情达成一致，有时候我们需要AI帮我们做出决定——对人类全体利益最有利的决定。 那么，我们应该怎样把这些价值观编程到超级智能中呢？用什么样的数学公式来定义它？这些都是研究者们应该着手去解决的问题，并且是我们这个时代最核心的任务。</p>
<p>对普罗大众来说，没有必要因为机器人的可怕而辗转失眠。我们当前还没有任何技术能够达到人工智能。也即是为什么一些超级大公司深度投资研发智能计算机；一个真正的AI可以使得其中任何一家公司获得难以想象的优势。不过，他们也应当了解其中的劣势并且找到规避的办法。</p>
<p>这点闹人的建议是基于一封在未来生活研究所的官方网站的公开信<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://futureoflife.org/misc/open_letter
">[7]</span></a></sup>（没有宣称AI战争的来临）。信中号召在如何收割AI的收益并避免潜在瑕疵方面投入更多的研究，而不是警告人类的生存灾难。这封信的签名有不仅来自AI外行如霍金、马斯克和Bostrom等人的签名，还有知名计算机科学家（包括顶级AI研究员Demis Hassabis<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="http://www.technologyreview.com/news/532876/googles-intelligence-designer/">[8]</span></a></sup>）。你可以清楚看到他们从哪里来。毕竟，如何他们创造了一个不认同人类价值观的AI，那就是说，他们还不够聪明，无法控制他们自己的创造物。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.technologyreview.com/s/534871/our-fear-of-artificial-intelligence/<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.technologyreview.com/profile/paul-ford/<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://www.bbc.com/news/technology-30290540<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://www.technologyreview.com/news/523181/an-ai-chip-to-help-computers-understand-images/<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://www.rethinkrobotics.com/artificial-intelligence-tool-threat/)<a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://edge.org/response-detail/26057<a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://futureoflife.org/misc/open_letter<a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">http://www.technologyreview.com/news/532876/googles-intelligence-designer/<a href="#fnref:8" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>科技 - 人工智能</category>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>未来科技</tag>
        <tag>麻省理工评论</tag>
        <tag>自由意志</tag>
      </tags>
  </entry>
  <entry>
    <title>maven构建的一些小技巧</title>
    <url>/2020/02/10/maven%E6%9E%84%E5%BB%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>maven从设计上来说非常的简单，但是却是一个非常强大的工具。很多人将maven只是当做一个构建工具（从源代码生成可运行软件），但是实际上可以将maven当做一个项目管理工具，比如工程管理、插件管理、Jar包依赖管理、软件发布仓库管理等。</p>
<p>下面讲解一些在使用maven当中所遇到的一些小的技巧。</p>
<a id="more"></a>

<h3 id="maven是如何判断操作系统的？"><a href="#maven是如何判断操作系统的？" class="headerlink" title="maven是如何判断操作系统的？"></a>maven是如何判断操作系统的？</h3><p>操作系统家族是通过Maven Enforcer Plugin来实现的，具体来说，和如下代码的效果是完全一致的：</p>
<blockquote><p>Family is calculated based on testing against the name string retreived from the JDK. The name, arch and version values are retreived from the JDK using the following code：</p>
<footer><strong>引用自</strong><cite><a href="http://maven.apache.org/enforcer/enforcer-rules/requireOS.html" target="_blank" rel="noopener">官方文档</a></cite></footer></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OS_NAME = System.getProperty( <span class="string">"os.name"</span> ).toLowerCase( Locale.US );</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OS_ARCH = System.getProperty( <span class="string">"os.arch"</span> ).toLowerCase( Locale.US );</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OS_VERSION = System.getProperty( <span class="string">"os.version"</span> ).toLowerCase( Locale.US );</span><br></pre></td></tr></table></figure>

<h3 id="profiles可以配置哪些POM节点？"><a href="#profiles可以配置哪些POM节点？" class="headerlink" title="profiles可以配置哪些POM节点？"></a>profiles可以配置哪些POM节点？</h3><p><profiles> 内置在POM文件中，这样是比较推荐的方式，这样不会造成工程在迁移的时候造成信息丢失。<br>可以修改如下的节点:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">&lt;pluginRepositories&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;properties&gt; (not actually available in the main POM, but used behind the scenes)</span><br><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;reporting&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">a subset of the &lt;build&gt; element, which consists of:</span><br><span class="line">&lt;defaultGoal&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">&lt;testResources&gt;</span><br><span class="line">&lt;finalName&gt;</span><br></pre></td></tr></table></figure>


<h4 id="POM-elements-outside"><a href="#POM-elements-outside" class="headerlink" title="POM elements outside "></a>POM elements outside <profiles></h4><p>这样做的方式是不允许的，对工程迁移、编译都非常的不友好。可以通过外部文件比如settings.xml profiles.xml来一些参数，但是相对来说，危害要稍微小一些。</p>
<h3 id="如何配置仓库镜像（MirrorOf）？"><a href="#如何配置仓库镜像（MirrorOf）？" class="headerlink" title="如何配置仓库镜像（MirrorOf）？"></a>如何配置仓库镜像（MirrorOf）？</h3><p>在POM文件中使用Repositories标签就可以从你希望的地址上去下载构件，比如依赖库或者插件。这样对于工程的迁移性比较好。在任何地方都可以构建起来。</p>
<p>但是有的时候，你希望在不修改工程POM文件的情况下使用另外不同的仓库，这个时候就可以使用mirror。关于mirrorOf的规则可以参考官方文档<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Apache maven 配置仓库镜像：http://maven.apache.org/guides/mini/guide-mirror-settings.html">[1]</span></a></sup>。</p>
<p>几个需要注意的地方：<br>1、最快的镜像应该放在最前面<br>2、如果第一个镜像的规则是*，那么后面的仓库可能不会使用。<br>3、<id>的默认值是central</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">	&lt;mirror&gt;  </span><br><span class="line">        &lt;id&gt;aliyun&lt;&#x2F;id&gt;  </span><br><span class="line">        &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;  </span><br><span class="line">        &lt;name&gt;阿里云公共仓库&lt;&#x2F;name&gt;  </span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;  </span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">	</span><br><span class="line">    &lt;mirror&gt;    </span><br><span class="line">        &lt;id&gt;repo2&lt;&#x2F;id&gt;    </span><br><span class="line">        &lt;mirrorOf&gt;!central,*&lt;&#x2F;mirrorOf&gt;    </span><br><span class="line">        &lt;name&gt;Human Readable Name for this Mirror.&lt;&#x2F;name&gt;    </span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;repo2.maven.org&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;    </span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br></pre></td></tr></table></figure>




<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Apache maven 配置仓库镜像：http://maven.apache.org/guides/mini/guide-mirror-settings.html<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Building tools - maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>profiles</tag>
        <tag>settings.xml</tag>
        <tag>mirrorOf</tag>
      </tags>
  </entry>
  <entry>
    <title>通过maven自动化构建protobuf class代码</title>
    <url>/2020/02/10/%E9%80%9A%E8%BF%87maven%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAprotobuf/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="通过maven自动化构建protocal-buffer"><a href="#通过maven自动化构建protocal-buffer" class="headerlink" title="通过maven自动化构建protocal buffer"></a>通过maven自动化构建protocal buffer</h2><p>当对代码进行工程构建的时候，如果能够尽可能的自动化，这样对于提升整个软件质量、节省人力成本、减少因为人工干预导致的各种不可预知的错误是很好。<br>从protobuf的官方文档来看，通过cmd调用protoc当然可以生成相应的代码，但是对构建不够友好。于是，可以考虑通过maven来进行自动化构建，在启动maven构建的时候，自动调用protoc，生成代码，并打包成相应的jar包，集成到工程发布包中。<br>这里有2种方式，如下。</p>
<a id="more"></a>

<h2 id="第1种方式：使用protobuf-maven-plugin"><a href="#第1种方式：使用protobuf-maven-plugin" class="headerlink" title="第1种方式：使用protobuf-maven-plugin"></a>第1种方式：使用protobuf-maven-plugin</h2><h3 id="配置插件protobuf-maven-plugin"><a href="#配置插件protobuf-maven-plugin" class="headerlink" title="配置插件protobuf-maven-plugin"></a>配置插件protobuf-maven-plugin</h3><p>先从官网<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="下载protoc: https://developers.google.com/protocol-buffers/docs/downloads
">[2]</span></a></sup>上将protobuf的工具包下载下来，然后拷贝到工程目录下，配置POM文件如下, 通过相对路径引用protoc.exe文件。<br>.protow文件默认的路径在src/main/proto文件中。下面所有的子目录都会被当成包结构。</p>
<p>protobuf-maven-plugin<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="插件使用：https://www.xolstice.org/protobuf-maven-plugin/plugin-info.html
">[1]</span></a></sup>的maven配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checkStaleness</span>&gt;</span>false<span class="tag">&lt;/<span class="name">checkStaleness</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">staleMillis</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">staleMillis</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">protocExecutable</span>&gt;</span>$&#123;basedir&#125;\..\protobuf\bin\protoc.exe<span class="tag">&lt;/<span class="name">protocExecutable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">useArgumentFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useArgumentFile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="进一步改进maven配置"><a href="#进一步改进maven配置" class="headerlink" title="进一步改进maven配置"></a>进一步改进maven配置</h3><p>如果我们的POM构建需要同时支持不同的平台，比如windows,MAC,Linux，但是这些平台上的protoc路径和文件都不一样，怎么办呢？ 可以考虑如下方式。</p>
<p>通过profiles<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="maven profiles: http://maven.apache.org/guides/introduction/introduction-to-profiles.html
">[3]</span></a></sup>的<code>&lt;activation&gt;</code>如果通过profiles来激活不同的脚本调用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>windows<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checkStaleness</span>&gt;</span>false<span class="tag">&lt;/<span class="name">checkStaleness</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">staleMillis</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">staleMillis</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">protocExecutable</span>&gt;</span>$&#123;basedir&#125;\..\protobuf\bin\protoc.exe<span class="tag">&lt;/<span class="name">protocExecutable</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useArgumentFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useArgumentFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第2种方式通过antrun插件来完成"><a href="#第2种方式通过antrun插件来完成" class="headerlink" title="第2种方式通过antrun插件来完成"></a>第2种方式通过antrun插件来完成</h2><p>通过组合os-maven-plugin, maven-antrun-plugin,build-helper-maven-plugin等多个插件来完成，效果是完全一样的。<br>这个例子<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="maven-protobuf-compile: https://vlkan.com/blog/post/2015/11/27/maven-protobuf/
">[4]</span></a></sup>的价值在于maven的灵活性和可定制型，对于理解如何使用maven来达到比较复杂的目的很有帮助。特别是antrun插件，很多遗留的工程在满足条件的情况下可以往maven进行迁移。<br>参考文档：</p>
<h3 id="前置条件："><a href="#前置条件：" class="headerlink" title="前置条件："></a>前置条件：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- protobuf paths --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">protobuf.input.directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/proto<span class="tag">&lt;/<span class="name">protobuf.input.directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">protobuf.output.directory</span>&gt;</span>$&#123;project.build.directory&#125;/generated-sources<span class="tag">&lt;/<span class="name">protobuf.output.directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- library versions --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build-helper-maven-plugin.version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven-antrun-plugin.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven-antrun-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven-dependency-plugin.version</span>&gt;</span>2.10<span class="tag">&lt;/<span class="name">maven-dependency-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven-shade-plugin.version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">maven-shade-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">os-maven-plugin.version</span>&gt;</span>1.4.1.Final<span class="tag">&lt;/<span class="name">os-maven-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">protobuf.version</span>&gt;</span>3.0.0-beta-1<span class="tag">&lt;/<span class="name">protobuf.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="配置依赖的Protocol-Buffer-API"><a href="#配置依赖的Protocol-Buffer-API" class="headerlink" title="配置依赖的Protocol Buffer API"></a>配置依赖的Protocol Buffer API</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;protobuf.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="检查操作系统类型，并生成相应的工程属性Properties"><a href="#检查操作系统类型，并生成相应的工程属性Properties" class="headerlink" title="检查操作系统类型，并生成相应的工程属性Properties"></a>检查操作系统类型，并生成相应的工程属性Properties</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- provides os.detected.classifier (i.e. linux-x86_64, osx-x86_64) property --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;os-maven-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="自动下载平台相关的编译器"><a href="#自动下载平台相关的编译器" class="headerlink" title="自动下载平台相关的编译器"></a>自动下载平台相关的编译器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- copy protoc binary into build directory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-dependency-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-protoc<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactItems</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactItem</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protoc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;protobuf.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">type</span>&gt;</span>exe<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">overWrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overWrite</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">artifactItem</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">artifactItems</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="调用protoc生成相关的Java代码。"><a href="#调用protoc生成相关的Java代码。" class="headerlink" title="调用protoc生成相关的Java代码。"></a>调用protoc生成相关的Java代码。</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- compile proto buffer files using copied protoc binary --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-antrun-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>exec-protoc<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"protoc.filename"</span> <span class="attr">value</span>=<span class="string">"protoc-$&#123;protobuf.version&#125;-$&#123;os.detected.classifier&#125;.exe"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"protoc.filepath"</span> <span class="attr">value</span>=<span class="string">"$&#123;project.build.directory&#125;/$&#123;protoc.filename&#125;"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">chmod</span> <span class="attr">file</span>=<span class="string">"$&#123;protoc.filepath&#125;"</span> <span class="attr">perm</span>=<span class="string">"ugo+rx"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">"$&#123;protobuf.output.directory&#125;"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">"protobuf.input.filepaths.path"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$&#123;protobuf.input.directory&#125;"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"**/*.proto"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pathconvert</span> <span class="attr">pathsep</span>=<span class="string">" "</span> <span class="attr">property</span>=<span class="string">"protobuf.input.filepaths"</span> <span class="attr">refid</span>=<span class="string">"protobuf.input.filepaths.path"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exec</span> <span class="attr">executable</span>=<span class="string">"$&#123;protoc.filepath&#125;"</span> <span class="attr">failonerror</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">value</span>=<span class="string">"-I"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">value</span>=<span class="string">"$&#123;protobuf.input.directory&#125;"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">value</span>=<span class="string">"--java_out"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">value</span>=<span class="string">"$&#123;protobuf.output.directory&#125;"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">line</span>=<span class="string">"$&#123;protobuf.input.filepaths&#125;"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exec</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="将Java代码添加到包中"><a href="#将Java代码添加到包中" class="headerlink" title="将Java代码添加到包中"></a>将Java代码添加到包中</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- add generated proto buffer classes into the package --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>build-helper-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;build-helper-maven-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>add-classes<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;protobuf.output.directory&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">sources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="对Protocol-Buffer包进行shading"><a href="#对Protocol-Buffer包进行shading" class="headerlink" title="对Protocol Buffer包进行shading"></a>对Protocol Buffer包进行shading</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  shade protobuf to avoid version conflicts --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-shade-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>$&#123;project.groupId&#125;.$&#123;project.artifactId&#125;.shaded.protobuf<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>


<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">插件使用：https://www.xolstice.org/protobuf-maven-plugin/plugin-info.html<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">下载protoc: https://developers.google.com/protocol-buffers/docs/downloads<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">maven profiles: http://maven.apache.org/guides/introduction/introduction-to-profiles.html<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">maven-protobuf-compile: https://vlkan.com/blog/post/2015/11/27/maven-protobuf/<a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Building tools - maven</category>
        <category>protocol buffer</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>protocol</tag>
        <tag>buffer</tag>
      </tags>
  </entry>
  <entry>
    <title>不同linux发行版软件安装工具</title>
    <url>/2020/02/09/%E4%B8%8D%E5%90%8Clinux%E5%8F%91%E8%A1%8C%E7%89%88%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h3><p>RPM是Red-Hat Package Manager（RPM软件包管理器）的缩写，这一文件格式名称虽然打上了RedHat的标志<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Redhat guide: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/deployment_guide/
">[1]</span></a></sup>，但是其原始设计理念是开放式的，现在包括OpenLinux、S.u.S.E.以及Turbo Linux等Linux的分发版本都有采用，可以算是公认的行业标准了。</p>
<h3 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h3><p>apt-get<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="RPM使用参考：https://www.cnblogs.com/xiaochaohuashengmi/archive/2011/10/08/2203153.html
">[2]</span></a></sup>，是一条linux命令，适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。主要适用于Debian、Ubuntu的系统。 </p>
<a id="more"></a>

<p>Ubuntu 16.04 发布时，一个引人注目的新特性便是 apt 命令的引入。其实早在 2014 年，apt 命令就已经发布了第一个稳定版，只是直到 2016 年的 Ubuntu 16.04 系统发布时才开始引人关注。</p>
<h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>
<h3 id="zyppe"><a href="#zyppe" class="headerlink" title="zyppe"></a>zyppe</h3><p>zypper<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="opensuse使用zypper安装软件：https://www.cnblogs.com/littleatp/p/9313563.html
">[3]</span></a></sup>， opensuse中使用的包软件软件，类似CentOS中Yum.</p>
<h3 id="yast"><a href="#yast" class="headerlink" title="yast"></a>yast</h3><p>OpenSUSE中可以使用YAST图形界面中来安装。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Redhat guide: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/deployment_guide/<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">RPM使用参考：https://www.cnblogs.com/xiaochaohuashengmi/archive/2011/10/08/2203153.html<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">opensuse使用zypper安装软件：https://www.cnblogs.com/littleatp/p/9313563.html<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>404</title>
    <url>/404/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><script src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"
        charset="utf-8" homePageUrl="/" homePageName="Back to home">
</script>
]]></content>
  </entry>
  <entry>
    <title>文章分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
  </entry>
  <entry>
    <title>我是谁</title>
    <url>/about/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
  </entry>
  <entry>
    <title>谷歌日程</title>
    <url>/schedule/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
  </entry>
</search>
